/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function listConversationTitles() {
    return invoke()<{ [key: string]: string }>("list_conversation_titles")
}

export function getConversationMessages(conversationId: string) {
    return invoke()<ConversationMessageAddedEvent[]>("get_conversation_messages", { conversationId })
}

export function getConversationTitle(conversationId: string) {
    return invoke()<string>("get_conversation_title", { conversationId })
}

export function getConversation(conversationId: string) {
    return invoke()<Conversation>("get_conversation", { conversationId })
}

export function newConversation() {
    return invoke()<Conversation>("new_conversation")
}

export function setConversationTitle(conversationId: string, newTitle: string) {
    return invoke()<null>("set_conversation_title", { conversationId,newTitle })
}

export function newConversationUserMessage(conversationId: string, content: string) {
    return invoke()<null>("new_conversation_user_message", { conversationId,content })
}

export function newConversationAssistantMessage(conversationId: string) {
    return invoke()<null>("new_conversation_assistant_message", { conversationId })
}

export function listFiles() {
    return invoke()<string[]>("list_files")
}

export function wrapEventPayloads(bruh: WrapType) {
    return invoke()<null>("wrap_event_payloads", { bruh })
}

export type Conversation = { id: string; history: ConversationEventRecord[] }
export type ChatRole = "System" | "Assistant" | "User"
export type WrapType = "None" | { ConversationTitleChangedEventPayload: ConversationTitleChangedEventPayload } | { ConversationMessageAddedEventPayload: ConversationMessageAddedEventPayload }
export type ConversationEvent = { MessageAdded: ConversationMessageAddedEvent } | { TitleChange: ConversationTitleChangedEvent }
export type ConversationTitleChangedEventPayload = { conversation_id: string; new_title: string }
export type ConversationMessageAddedEventPayload = { conversation_id: string; author: ChatRole; content: string }
export type ConversationEventRecord = { id: string; conversation_id: string; timestamp: string; event: ConversationEvent }
export type ConversationMessageAddedEvent = { author: ChatRole; content: string }
export type ConversationTitleChangedEvent = { new_title: string }
